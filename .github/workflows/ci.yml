name: CI

on:
  push:
    branches:
    - main
    - stable
    - v*.*.*
    tags:
    - v*
  pull_request:
  workflow_dispatch:

jobs:

  tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    strategy:
      fail-fast: false

      matrix:
        include:

        - name: Tests, Python 3.13, Windows
          os: windows-latest
          nox_session: tests-3.13(all)
          python: '3.13'

        - name: Tests, Python 3.12, macOS
          os: macos-latest
          nox_session: tests-3.12(all)
          python: '3.12'

        - name: Tests, Python 3.11, Ubuntu
          os: ubuntu-latest
          nox_session: tests-3.11(all)
          python: '3.11'

        - name: Packaging, Python 3.13, Ubuntu
          os: ubuntu-latest
          python: '3.13'
          nox_session: build

        - name: Documentation, Python 3.13, Ubuntu
          os: ubuntu-latest
          python: '3.13'
          nox_session: docs

    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Graphviz for doc builds
      if: startsWith(matrix.nox_session, 'docs')
      uses: ts-graphviz/setup-graphviz@v2

    - name: Install pandoc for doc builds
      # This step requires Ubuntu
      if: startsWith(matrix.nox_session, 'docs')
      run: |
        sudo apt update
        sudo apt-get install -y pandoc

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        python-version: ${{ matrix.python }}
        enable-cache: true
        cache-suffix: ${{ matrix.nox_session }}-${{ matrix.python }}-${{ runner.os }}

    - name: Run the check
      # Add --frozen back if adopting uv.lock ; see PlasmaPy's .github/workflows/ci.yml
      run: uv run --python ${{ matrix.python }} --with nox nox -s '${{ matrix.nox_session }}'

    - name: Upload coverage reports to Codecov
      if: ${{ contains(matrix.nox_session, 'cov') }}
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}